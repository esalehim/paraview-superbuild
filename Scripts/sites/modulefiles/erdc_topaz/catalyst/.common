proc ModulesHelp { } {
	puts stderr "This loads the ParaView Catalyst environment"
}

proc ModulesDisplay { } {
	puts stderr "Using ParaView Catalyst ${pv_module_version} built for ${current_compiler_name}/${pv_compiler_version} and ${current_mpi_name}/${pv_mpi_version}"
}

module-whatis    "loads the ParaView Catalyst environment"

conflict catalyst
conflict paraview
conflict ensight
conflict visit

if ![is-loaded compiler] {
	puts stderr "Loading default Intel compiler"
	module load compiler/${default_compiler}/${default_compiler_version}
}
if ![is-loaded mpi] {
	puts stderr "Loading default SGI MPI"
	module load mpi/${default_mpi}/${default_mpi_version}
}

set modules_loaded [split $env(LOADEDMODULES) :]
set current_compiler		[split [lsearch -inline ${modules_loaded} compiler/*] /]
set current_compiler_name 	[lindex ${current_compiler} 1]
set current_compiler_version 	[lindex ${current_compiler} 2]
set current_mpi			[split [lsearch -inline ${modules_loaded} mpi/*] /]
set current_mpi_name 		[lindex ${current_mpi} 1]
set current_mpi_version 	[lindex ${current_mpi} 2]
if { ${current_compiler_name} == "gcc" } {
  set current_compiler_mod "gnu"
} else {
  set current_compiler_mod ${current_compiler_name}
}

# Grab all available installations
set pv_module_version	[file tail $ModulesCurrentModulefile]
set pv_basedir 		$env(DAAC_HOME)/catalyst/${pv_module_version}
set available_dirs	[glob -types d -nocomplain -directory ${pv_basedir} -tails */*/*/*]
if {[llength ${available_dirs}] == 0} {
	puts stderr "No Catalyst installations found"
	exit 1
}

# Only look in compiler compatible directories
set available_dirs	[lsearch -all -inline ${available_dirs} ${current_compiler_mod}/*/${current_mpi_name}/*]
if {[llength ${available_dirs}] == 0} {
	puts stderr "No Catalyst installations found compatible with the currently loaded ${current_compiler_mod} compiler and ${current_mpi_name} MPI combination"
	exit 1
}

# The following loop iterates through all installed configurations and looks
# for the closest compiler match without going over and then the closes MPI version match.
set pv_compiler_version ""
set pv_mpi_version ""
set cmp_pv_compiler_version ""
set cmp_pv_mpi_version ""
set cmp_current_compiler_version [regsub -all {\-} ${current_compiler_version} {.}]
set cmp_current_mpi_version [regsub -all {\-} ${current_mpi_version} {.}]
foreach dir ${available_dirs} {
	set dsplit [split ${dir} /]
	set test_compiler_version	[lindex ${dsplit} 1]
	set test_mpi_version		[lindex ${dsplit} 3]
	set cmp_test_compiler_version	[regsub -all {\-} ${test_compiler_version} {.}]
	set cmp_test_mpi_version	[regsub -all {\-} ${test_mpi_version} {.}]
	set cmp_current_compiler	[package vcompare ${cmp_test_compiler_version} ${cmp_current_compiler_version}]
	set cmp_current_mpi		[package vcompare ${cmp_test_mpi_version} ${cmp_current_mpi_version}]

        # Ignore install if either compiler or MPI versions are incompatible
	if {${cmp_current_compiler} == 1 || ${cmp_current_mpi} == 1} { continue }

	# Use it if it's the first one we've found
        if {[string length ${pv_compiler_version}] == 0} {
		set pv_compiler_version ${test_compiler_version}
		set pv_mpi_version ${test_mpi_version}
		set cmp_pv_compiler_version ${cmp_test_compiler_version}
		set cmp_pv_mpi_version ${cmp_test_mpi_version}
		continue
	}

	set cmp_pv_compiler		[package vcompare ${cmp_test_compiler_version} ${cmp_pv_compiler_version}]
	set cmp_pv_mpi			[package vcompare ${cmp_test_mpi_version} ${cmp_pv_mpi_version}]

	if {${cmp_pv_compiler} == 1 || (${cmp_pv_compiler} == 0 && ${cmp_pv_mpi} == 1)} {
		set pv_compiler_version ${test_compiler_version}
		set pv_mpi_version ${test_mpi_version}
		set cmp_pv_compiler_version ${cmp_test_compiler_version}
		set cmp_pv_mpi_version ${cmp_test_mpi_version}
	}
}

if {[string length ${pv_compiler_version}] == 0} {
	puts stderr "No Catalyst installations found compatible with the ${current_compiler_mod}/${current_compiler_version} compiler and ${current_mpi_name}/${current_mpi_version} MPI combination"
	exit 2
}
set pv_prefix ${pv_basedir}/${current_compiler_mod}/${pv_compiler_version}/${current_mpi_name}/${pv_mpi_version}
set pv_version [regexp -inline {[0-9]+\.[0-9]+} ${pv_module_version}]

if ![is-loaded costinit] {
	module load costinit
}
if ![is-loaded boost/${current_compiler_mod}] {
	module load boost/${current_compiler_mod}/${default_boost_version}
}
if ![is-loaded python/${current_compiler_mod}] {
	module load python/${current_compiler_mod}/${default_python_version}
}
if ![is-loaded numpy/${current_compiler_mod}] {
	module load numpy/${current_compiler_mod}/${default_numpy_version}
}
if ![is-loaded matplotlib/${current_compiler_mod}] {
	module load matplotlib/${current_compiler_mod}/${default_matplotlib_version}
}
if ![is-loaded hdf5/${current_compiler_mod}] {
	module load hdf5/${current_compiler_mod}/${default_hdf5_version}
}


# Make sure we use the right set of GCC headers for C++11 compatibility
if { ${current_compiler_name} == "intel" } {
	prepend-path PATH	/apps/gnu_compiler/${default_intel_gcc_header_version}/bin
}

prepend-path PATH		${pv_prefix}/bin
prepend-path LD_LIBRARY_PATH	${pv_prefix}/lib
prepend-path LD_LIBRARY_PATH	${pv_prefix}/lib/paraview-${pv_version}
prepend-path PYTHONPATH		${pv_prefix}/lib/python2.7/site-packages
prepend-path PYTHONPATH		${pv_prefix}/lib/paraview-${pv_version}/site-packages
setenv ParaView_DIR		${pv_prefix}

set pv_version_full [regexp -inline {[0-9\.]+} ${pv_module_version}]
exec $env(DAAC_HOME)/paraview/utils/daac_logger local DAAC_catalyst ${pv_version_full}
